# Use OpenID Connect to authenticate to Azure
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Cwindows#use-the-azure-login-action-with-openid-connect
# *** https://colinsalmcorner.com/using-oidc-with-terraform-in-github-actions/
# https://azure.github.io/azure-workload-identity/docs/topics/federated-identity-credential.html#federated-identity-credential-for-a-user-assigned-managed-identity

name: Migrate To Azure Monitoring Agent
on:
  push:
    branches:
    - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# Global environment variables accessible from any jobs or steps
env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  IDYSUBSCRIPTION: ${{ secrets.IDYSUBSCRIPTION }}
  MGTSUBSCRIPTION: ${{ secrets.MGTSUBSCRIPTION }}
  CONSUBSCRIPTION: ${{ secrets.CONSUBSCRIPTION }} # Subscription for the connection monitor
  IACSUBSCRIPTION: ${{ secrets.IACSUBSCRIPTION }}
  UAMI_NAME: ${{ secrets.UAMI_NAME }}
  uamiResourceGroup: rgp-iac
  mgtResourceGroup: rg-management
  mgtLogAnalyticsWorkspace: log-management
  LAW_ID: ${{ secrets.LAW_ID }}
  rgpName: rgp-idy
  rgpLocation: centralus
  uamiLocation: eastus2
  uamiRoleAssignmentVmContrib: "Virtual Machine Contributor"
  uamiRoleAssignmentLogAnalyticsContrib: "Log Analytics Contributor"
  uamiRoleAssignmentArcContrib: "Azure Arc Connected Resource Administrator"
  azCliVer: 2.58.0
  tfVersion: 1.7.5
  bicepVer: 0.26.54
  tfWorkingdir: src/tfm
  skipUAMI: false # Set to true to skip UAMI creation, false to create UAMI if necessary
  skipDriveSpace: true # Set to true to skip drive space check, false to check drive space
  skipMMAStatus: false # Set to true to skip MMA status check, false to check MMA status
  skipDCRDownload: false # Set to true to skip DCR download, false to download DCR
  skipRemediate: false # Set to true to skip remediation, false to remediate
  skipVmExtension: false # Set to true to skip VM extension check, false to check VM extension
  removeMMA: false # Set to true to remove MMA extension, false to keep MMA extension
  dcrUrl: 'https://raw.githubusercontent.com/microsoft/AzureMonitorCommunity/master/Azure%20Services/Azure%20Monitor/Agents/Migration%20Tools/DCR%20Config%20Generator/WorkspaceConfigToDCRMigrationTool.ps1'
  dcrOutputPath: az-scripts/WorkspaceConfigToDCRMigrationTool.ps1
  dcrExportPath: dcr-export
  dcrNamePrefix: dcr # For DCR migration tool generated templates
  policy-asm-dcr: enable-ama-dcr
  policy-asm-dcr-ext: enable-ama-dcr-ext
  TARGET_MG_ID: ${{ secrets.TARGET_MG_ID }}
  TARGET_MG_NAME: ${{ secrets.TARGET_MG_NAME }}
  operation: plan # Allowable values: [plan, apply, rollback

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
    working-directory: src/tfm

jobs:
  prepare-dcr:
    name: 'prepare-dcr'
    runs-on: ubuntu-latest
    environment: tst
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Authenticate to Azure tenant using the Azure login action (OIDC). Based on umi: ama-umi-002
    - name: authenticate_to_azure_with_oidc
      uses: Azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
    
    # Create user-assigned managed identity (UAMI) and assign roles
    - name: create_umi_and_assign_roles
      if: ${{ env.skipUAMI == 'false' }}
      uses: Azure/CLI@v1
      with: 
        azcliversion: ${{ env.azCliVer }}
        inlineScript: |
          chmod +x az-scripts/createAndAssignUAMI.sh
          az-scripts/createAndAssignUAMI.sh
    
    # Get drive space on each VM to ensure there is enough space (at least 10GB) to install the Azure Monitoring Agent
    - name: 'get_drive_space'
      if: ${{ env.skipDriveSpace == 'false' }}
      uses: azure/powershell@v1
      with:
        inlineScript: |
          chmod +x az-scripts/Get-DriveSpace.ps1
          Select-AzSubscription -SubscriptionId ${{ secrets.IDYSUBSCRIPTION }}
          az-scripts/Get-DriveSpace.ps1
        azPSVersion: "latest"

    # Download the DCR generator script, comment out the Set-DeployOutputOnAzure function, and deploy the generated templates to create the DCRs
    - name: 'download_execute_dcr_generator_script'
      if: ${{ env.skipDCRDownload == 'false' }}
      uses: azure/powershell@v1
      with:
        inlineScript: |
          try { Invoke-WebRequest -Uri ${{ env.dcrUrl }} -OutFile ${{ env.dcrOutputPath }} -Verbose }
          catch { Write-Host "Failed to download DCR generator script" }
          (Get-Content -Path ${{ env.dcrOutputPath }}) -replace '^Set-DeployOutputOnAzure', '# Set-DeployOutputOnAzure' | Set-Content -Path ${{ env.dcrOutputPath }}
          chmod +x az-scripts/Get-EndpointConnectionResult.ps1
          az-scripts/WorkspaceConfigToDCRMigrationTool.ps1 -SubscriptionId ${{ secrets.MGTSUBSCRIPTION }} -ResourceGroupName ${{ env.mgtResourceGroup }} -WorkspaceName ${{ env.mgtLogAnalyticsWorkspace }} -DCRName ${{ env.dcrNamePrefix }} -OutputFolder ${{ env.dcrExportPath }} -Verbose 
          $outputFiles = (Get-ChildItem -Path ${{ env.dcrExportPath }}).FullName
          $templateFiles = $outputFiles | Where-Object { $_ -like "*template.json" }
          foreach ($templateFile in $templateFiles) 
          {
            Write-Host ('-'*100)
            Get-Content -Path $templateFile
            Write-Host ('-'*100)
            New-AzResourceGroupDeployment -ResourceGroupName ${{ env.mgtResourceGroup }} -TemplateFile $templateFile -Verbose
          }
        azPSVersion: "latest"

  provision-deprovision:
    name: 'provision-deprovision'
    runs-on: ubuntu-latest
    environment: prd
    needs: prepare-dcr
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Authenticate to Azure tenant using the Azure login action (OIDC). Based on umi: ama-umi-002
    - name: authenticate_to_azure_with_oidc
      uses: Azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
    
    # Setup Terraform (requires unzip on Ubuntu. Run 'sudo apt-get install unzip' on self-hosted runner)
    - name: 'terraform_setup'
      if: ${{ env.operation == 'apply' || env.operation == 'rollback' }}
      id: setup  
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.tfVersion }}
        terraform_wrapper: true   
  
    # Check version
    - name: 'terraform_version_check'
      if: ${{ env.operation == 'apply' || env.operation == 'rollback' }}
      id: version
      run: terraform version

    # Init
    - name: 'terraform_init'
      id: init
      run: terraform init
      timeout-minutes: 2
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    # Format
    - name: 'terraform_format'
      if: ${{ env.operation == 'plan' || env.operation == 'apply' || env.operation == 'rollback' }}
      id: format
      run: terraform fmt -recursive

    # Deploy
    - name: 'terraform_plan'
      id: plan
      run: terraform plan -var="target_mg_id=${{ env.TARGET_MG_ID }}" -var="target_mg_name=${{ env.TARGET_MG_NAME }}" -var="identitySubscriptionId=${{ secrets.IDYSUBSCRIPTION }}" -var="managementSubscriptionId=${{ secrets.MGTSUBSCRIPTION }}" -var="connectionSubscriptionId=${{ secrets.CONSUBSCRIPTION }}" -var="iacSubscriptionId=${{ secrets.IACSUBSCRIPTION }}" -var="uami_name=${{ secrets.UAMI_NAME }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    # Deploy
    - name: 'terraform_apply'
      if: ${{ env.operation == 'apply' }}
      id: apply
      run: terraform apply -var="target_mg_id=${{ env.TARGET_MG_ID }}" -var="target_mg_name=${{ env.TARGET_MG_NAME }}" -var="identitySubscriptionId=${{ secrets.IDYSUBSCRIPTION }}" -var="managementSubscriptionId=${{ secrets.MGTSUBSCRIPTION }}" -var="connectionSubscriptionId=${{ secrets.CONSUBSCRIPTION }}" -var="iacSubscriptionId=${{ secrets.IACSUBSCRIPTION }}" -var="uami_name=${{ secrets.UAMI_NAME }}" -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
    
    # Trigger policy state scan
    - name: "trigger_policy_state_scan"
      if: ${{ env.operation == 'apply' }}
      uses: azure/cli@v2
      with:
        inlineScript: |
          az account set --subscription ${{ secrets.IDYSUBSCRIPTION }}
          az policy state trigger-scan -g ${{ env.rgpName }} --no-wait --verbose
        azcliversion: ${{ env.azCliVer }}

    # Get VM extension information to determine if the AMA agent is installed, in which case the MMA extension can be removed if desired
    - name: 'get_vm_extension_status'
      if: ${{ env.skipVmExtension == 'false' }}
      uses: azure/powershell@v1
      with:
        inlineScript: |
          chmod +x az-scripts/Get-VmExtension.ps1
          Select-AzSubscription -SubscriptionId ${{ secrets.IDYSUBSCRIPTION }}
          az-scripts/Get-VmExtension.ps1
        azPSVersion: "latest"

    # Rollback
    - name: 'terraform_rollback'
      if: ${{ env.operation == 'rollback' }}
      id: rollback
      run: terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
