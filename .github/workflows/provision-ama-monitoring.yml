# Use OpenID Connect to authenticate to Azure
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Cwindows#use-the-azure-login-action-with-openid-connect
# *** https://colinsalmcorner.com/using-oidc-with-terraform-in-github-actions/
# https://azure.github.io/azure-workload-identity/docs/topics/federated-identity-credential.html#federated-identity-credential-for-a-user-assigned-managed-identity

name: Migrate To Azure Monitoring Agent
on:
  push:
    branches:
    - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  pre-requisites:
    name: 'setup_worfklow'
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      uamiName: umi-ama-mig-001
      uamiResourceGroup: rgp-iac
      idySubscription: "1d790e78-7852-498d-8087-f5d48686a50e"
      lawId: "11de000e-9725-45e5-9530-3e291e1654b1"
      rgpName: rgp-idy
      rgpLocation: centralus
      uamiLocation: eastus2
      uamiRoleAssignmentVmContrib: "Virtual Machine Contributor"
      uamiRoleAssignmentLogAnalyticsContrib: "Log Analytics Contributor"
      uamiRoleAssignmentArcContrib: "Azure Arc Connected Resource Administrator"
      azCliVer: 2.58.0
      bicepVer: 0.26.54
      operation: plan # Allowable values: plan, apply, rollback
      skipUAMI: false # Set to true to skip UAMI creation, false to create UAMI if necessary

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Authenticate to Azure tenant using the Azure login action (OIDC). Based on umi: ama-umi-002
    - name: authenticate_to_azure_with_oidc
      uses: Azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
    
    # Create user-assigned managed identity (UAMI) and assign roles
    - name: create_umi_and_assign_roles
      if: ${{ env.skipUAMI == 'false' }}
      uses: Azure/CLI@v1
      with: 
        azcliversion: ${{ env.azCliVer }}
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/az-scripts/createAndAssignUAMI.sh
          $GITHUB_WORKSPACE/az-scripts/createAndAssignUAMI.sh
    
    # Get drive space on each VM to ensure there is enough space (at least 10GB) to install the Azure Monitoring Agent
    - name: 'get_drive_space'
      uses: azure/powershell@v1
      with:
        inlineScript: |
          chmod +x az-scripts/Get-DriveSpace.ps1
          Select-AzSubscription -SubscriptionId ${{ env.idySubscription }}
          az-scripts/Get-DriveSpace.ps1
        azPSVersion: "latest"

    # Test connectivity to required endpoints from each VM
    - name: 'check_connection_results'
      uses: azure/powershell@v1
      with:
        inlineScript: |
          chmod +x az-scripts/Get-EndpointConnectionResult.ps1
          az-scripts/Get-EndpointConnectionResult.ps1
        azPSVersion: "latest"


    
        
