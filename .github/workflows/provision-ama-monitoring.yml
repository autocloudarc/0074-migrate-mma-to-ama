# Use OpenID Connect to authenticate to Azure
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Cwindows#use-the-azure-login-action-with-openid-connect
# *** https://colinsalmcorner.com/using-oidc-with-terraform-in-github-actions/
# https://azure.github.io/azure-workload-identity/docs/topics/federated-identity-credential.html#federated-identity-credential-for-a-user-assigned-managed-identity

# This workflow will provision the Azure Monitoring Agent on the target compute resources
name: Migrate To Azure Monitoring Agent
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Federated credentials (OIDC) Permissions for the GitHub Actions runner to authenticate to Azure
permissions:
  id-token: write
  contents: read

# Global environment variables accessible from any jobs or steps
env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} # Service principal client ID
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Default log-in subscription for tenant
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }} # Tenant ID in which the service principal is created
  IDYSUBSCRIPTION: ${{ secrets.IDYSUBSCRIPTION }} # Target subscription which contains the compute resources to configure with the AMA agent 
  MGTSUBSCRIPTION: ${{ secrets.MGTSUBSCRIPTION }} # Subscription in which the log analytics workspace, designated as the target repository for the DCRs (and compute resources) is created
  CONSUBSCRIPTION: ${{ secrets.CONSUBSCRIPTION }} # Subscription for the connectivity (hub netowkring) resources, e.g., VNETs, NSGs, etc. (For example, if your organization has already deployed the Azure Landing Zones)
  IACSUBSCRIPTION: ${{ secrets.IACSUBSCRIPTION }} # Subscription for the IaC resources, the user assigned managed identity that will install the AMA agent on the target VMs and the storage account, container and blob for the .tfstate file.
  UAMI_NAME: ${{ secrets.UAMI_NAME }} # The name of the user assigned managed identity which will configure the AMA agent on the targer compute resources (VMs, VM Scale Sets), i.e. umi-ama-mig-001
  uamiResourceGroup: rgp-iac # Resource group in which the UAMI is created and optionally the storage account, container and blob for the .tfstate file
  mgtResourceGroup: rg-management # Resource group in which the log analytics workspace is created
  mgtLogAnalyticsWorkspace: log-management # Target log analytics workspace name
  LAW_ID: ${{ secrets.LAW_ID }} # Target log analytics workspace ID
  rgpName: rgp-idy # Resource group in which the target compute resources are located
  rgpLocation: centralus # Location of the target compute resources
  uamiLocation: eastus2 # Location of the user assigned managed identity
  uamiRoleAssignmentVmContrib: 'Virtual Machine Contributor' # Role assignment for the UAMI on the target compute resources
  uamiRoleAssignmentLogAnalyticsContrib: 'Log Analytics Contributor' # Role assignment for the UAMI on the target log analytics workspace
  uamiRoleAssignmentArcContrib: 'Azure Arc Connected Resource Administrator' # 
  azCliVer: latest
  tfVersion: latest
  bicepVer: latest
  tfWorkingdir: src/tfm # Terraform working directory
  skipUAMI: false # Set to true to skip UAMI creation, false to create UAMI if necessary
  skipDriveSpace: true # Set to true to skip drive space check, false to check drive space
  skipMMAStatus: false # Set to true to skip MMA status check, false to check MMA status
  skipDCRDownload: false # Set to true to skip DCR download, false to download DCR
  skipDCRExecute: false # Set to true to skip the DCR execution, false to execute the downloaded or staged DCR Script
  skipRemediate: false # Set to true to skip remediation, false to remediate
  skipVmExtension: false # Set to true to skip VM extension check, false to check VM extension
  skipAssociateVms: false # Set to true to skip VM association, false to associate VMs with DCR
  skipUploadDownload: true # Set to true to skip upload/download, false to upload/download
  skipOrigTfPlan: true # Set to true to skip Terraform plan, false to run Terraform plan
  removeMMA: false # Set to true to remove MMA extension, false to keep MMA extension
  dcrUrl: 'https://raw.githubusercontent.com/microsoft/AzureMonitorCommunity/master/Azure%20Services/Azure%20Monitor/Agents/Migration%20Tools/DCR%20Config%20Generator/WorkspaceConfigToDCRMigrationTool.ps1'
  dcrOutputPath: az-scripts/WorkspaceConfigToDCRMigrationTool.ps1 # Local (GitHub runner) relative path to the DCR generator script
  dcrExportPath: dcr-export # Export path for the DCR templates
  dcrNamePrefix: dcr # For DCR migration tool generated templates
  dcrResourceType: 'Microsoft.Insights/dataCollectionRules' # Resource type for DCRs
  TARGET_MG_ID: ${{ secrets.TARGET_MG_ID }} # Target scope of management group ID where the Azure Initiatives with Monitoring polices will be assigned
  TARGET_MG_NAME: ${{ secrets.TARGET_MG_NAME }} # Target scope of management group name where the Azure Initiatives with Monitoring polices will be assigned
  backendStorageRgp: ${{ secrets.BACKEND_STORAGE_RGP }} # Resource group in which the backend storage account, container and blob are located
  backendStorageAccount: ${{ secrets.BACKEND_STORAGE_ACCOUNT }} # Backend storage account for the ama.tfstate file
  backendStorageContainer: ${{ secrets.BACKEND_STORAGE_CONTAINER }} # Backend storage container for the ama.tfstate file
  backendStorageBlob: ${{ secrets.BACKEND_STORAGE_BLOB }} # Backend storage blob (actually same as the ama.tfstate file)
  dceName: dce # task-item: randomize name?
  dcrAssociation: dcrVms # Virtual machines that will be associated with DCRs based on the VM resource ids specified in the file: /az-scripts/input/input.csv
  pubNetAccess: 'Enabled' # Public network access for the data collection endpoint
  operation: apply # Allowable values: [plan, apply] # NOTE: Rollback isn't available since the only way to effectively reset the state is to delete the state file after each iteration of plan and apply.

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
    working-directory: src/tfm

jobs:
  prepare-dcr:
    name: 'prepare-dcr'
    runs-on: ubuntu-latest
    environment: tst
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      # Authenticate to Azure tenant using the Azure login action (OIDC). Based on umi: ama-umi-002
      - name: authenticate_to_azure_with_oidc
        uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Create user-assigned managed identity (UAMI) and assign roles
      - name: create_umi_and_assign_roles
        if: ${{ env.skipUAMI == 'false' }}
        run: |
          chmod +x az-scripts/createAndAssignUAMI.sh \
          az-scripts/createAndAssignUAMI.sh
        working-directory: az-scripts
      # Create a data collection endpoint
      - name: create_data_collection_endpoint
        run: |
          randomSuffix=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 6 | head -n 1)
          az account set --subscription ${{ secrets.MGTSUBSCRIPTION }} --verbose 
          az monitor data-collection endpoint create --data-collection-endpoint-name ${{ env.dceName }} --public-network-access ${{ env.pubNetAccess }} --resource-group ${{ env.mgtResourceGroup }}

      # Update PowerShell Az Modules
      - name: 'update_ps_modules_az'
        uses: azure/powershell@v2
        with:
          inlineScript: | 
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -Verbose
            # Check if the Az module is installed
            $azModule = Get-Module -ListAvailable Az

            if ($azModule -eq $null) 
            {
                # Az module is not installed, install it
                Write-Output "Az module is not installed. Installing..."
                Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force -Verbose
            } 
            else 
            {
               # Az module is installed, update it
               Write-Output "Az module is already installed. Updating..."
               Update-Module -Name Az -Force -ErrorAction SilentlyContinue -Verbose
            }
          azPSVersion: 'latest'
      # Get drive space on each VM to ensure there is enough space (at least 10GB) to install the Azure Monitoring Agent
      - name: 'get_drive_space'
        if: ${{ env.skipDriveSpace == 'false' }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            chmod +x az-scripts/Get-DriveSpace.ps1
            Select-AzSubscription -SubscriptionId ${{ secrets.IDYSUBSCRIPTION }}
            az-scripts/Get-DriveSpace.ps1
          azPSVersion: 'latest'

      # Download the DCR generator script, comment out the Set-DeployOutputOnAzure function, and deploy the generated templates to create the DCRs
      - name: 'download_dcr_generator_script'
        if: ${{ env.skipDCRDownload == 'false' }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            try { Invoke-WebRequest -Uri ${{ env.dcrUrl }} -OutFile ${{ env.dcrOutputPath }} -Verbose }
            catch { Write-Host "Failed to download DCR generator script" }
            (Get-Content -Path ${{ env.dcrOutputPath }}) -replace '^Set-DeployOutputOnAzure', '# Set-DeployOutputOnAzure' | Set-Content -Path ${{ env.dcrOutputPath }}
            chmod +x az-scripts/Get-EndpointConnectionResult.ps1
          azPSVersion: 'latest'

      # Execute the DCR generator script; First comment out the Set-DeployOutputOnAzure function, and deploy the generated templates to create the DCRs
      - name: 'execute_dcr_generator_script'
        if: ${{ env.skipDCRExecute == 'false' }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            az-scripts/WorkspaceConfigToDCRMigrationTool.ps1 -SubscriptionId ${{ secrets.MGTSUBSCRIPTION }} -ResourceGroupName ${{ env.mgtResourceGroup }} -WorkspaceName ${{ env.mgtLogAnalyticsWorkspace }} -DCRName ${{ env.dcrNamePrefix }} -OutputFolder ${{ env.dcrExportPath }} -Verbose 
            $outputFiles = (Get-ChildItem -Path ${{ env.dcrExportPath }}).FullName
            $outputFiles
            $outputFiles | ForEach-Object { Get-Content -Path $_ }
            $templateFiles = $outputFiles | Where-Object { $_ -like "*template.json" }
            foreach ($templateFile in $templateFiles) 
            {
              Write-Host ('-'*100)
              Get-Content -Path $templateFile
              Write-Host ('-'*100)
              New-AzResourceGroupDeployment -ResourceGroupName ${{ env.mgtResourceGroup }} -TemplateFile $templateFile -Verbose
            }
            az-scripts/Get-EndpointConnectionResult.ps1
          azPSVersion: 'latest'

  provision-deprovision:
    name: 'provision-deprovision'
    runs-on: ubuntu-latest
    environment: prd
    needs: prepare-dcr
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Authenticate to Azure tenant using the Azure login action (OIDC). Based on umi: ama-umi-002
      - name: authenticate_to_azure_with_oidc
        uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Setup Terraform (requires unzip on Ubuntu. Run 'sudo apt-get install unzip' on self-hosted runner)
      - name: 'terraform_setup'
        if: ${{ env.operation == 'plan' || env.operation == 'apply' }}
        id: setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tfVersion }}
          terraform_wrapper: true

      # Check version
      - name: 'terraform_version_check'
        if: ${{ env.operation == 'plan' || env.operation == 'apply' }}
        id: version
        run: terraform version

      # Init
      - name: 'terraform_init'
        id: init
        run: terraform init
        timeout-minutes: 2
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      # Format
      - name: 'terraform_format'
        if: ${{ env.operation == 'plan' || env.operation == 'apply' }}
        id: format
        run: terraform fmt -recursive

      # Plan and Apply for each DCR
      - name: 'plan_apply_for_each_dcr'
        id: plan_apply_for_each_dcr
        if: ${{ env.operation == 'plan' || env.operation == 'apply' }}
        uses: azure/powershell@v2
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        with:
          inlineScript: |
            Select-AzSubscription -SubscriptionId ${{ secrets.MGTSUBSCRIPTION }}
            $dcrList = ((Get-AzResource -ResourceGroupName ${{ env.mgtResourceGroup }} -ResourceType ${{ env.dcrResourceType }}) | Where-Object {$_.Name -match '^dcr-'}).Name 
            $dcrList | Export-Csv -Path az-scripts/input/dcrList.csv -NoTypeInformation
            Write-Host "`$dcrList:"
            $dcrList
            $dcrCount = $dcrList.Count 
            $jsonDcrList = $dcrList | ConvertTo-Json
            $jsonDcrList | Out-File -FilePath az-scripts/input/jsonDcrList.json
            Write-Host "`$jsonDcrList: $jsonDcrList"
            Set-Location -Path ${{ github.workspace }}/src/tfm -Verbose
            foreach ($dcr_instance in $dcrList) 
            {
              Write-Host "terraform plan..."
              terraform plan -var="target_mg_id=${{ env.TARGET_MG_ID }}" -var="target_mg_name=${{ env.TARGET_MG_NAME }}" -var="identitySubscriptionId=${{ secrets.IDYSUBSCRIPTION }}" -var="managementSubscriptionId=${{ secrets.MGTSUBSCRIPTION }}" -var="connectivitySubscriptionId=${{ secrets.CONSUBSCRIPTION }}" -var="iacSubscriptionId=${{ secrets.IACSUBSCRIPTION }}" -var="UAMI_NAME=${{ secrets.UAMI_NAME }}" -var="dcr_instance"=$dcr_instance -var="dcr_count=$dcrCount" -lock=false
              if ("${{ env.operation }}" -eq "apply")
              {
                Write-Host "terraform apply..."
                terraform apply -var="target_mg_id=${{ env.TARGET_MG_ID }}" -var="target_mg_name=${{ env.TARGET_MG_NAME }}" -var="identitySubscriptionId=${{ secrets.IDYSUBSCRIPTION }}" -var="managementSubscriptionId=${{ secrets.MGTSUBSCRIPTION }}" -var="connectivitySubscriptionId=${{ secrets.CONSUBSCRIPTION }}" -var="iacSubscriptionId=${{ secrets.IACSUBSCRIPTION }}" -var="UAMI_NAME=${{ secrets.UAMI_NAME }}" -var="dcr_instance"=$dcr_instance -var="dcr_count=$dcrCount" -lock=false -auto-approve
                Select-AzSubscription -SubscriptionId ${{ secrets.BACKEND_STORAGE_SUBSCRIPTION }} -Verbose
                # Set the backend storage account and container to delete the state file and reset the terraform configuration
                $storageAccount = Get-AzStorageAccount -ResourceGroupName ${{ env.backendStorageRgp }} -Name ${{ env.backendStorageAccount }}
                $ctx = $storageAccount.Context
                # Get the blob reference
                $stateFile = Get-AzStorageBlob -Blob ${{ env.backendStorageBlob }} -Container ${{ env.backendStorageContainer }} -Context $ctx
                # Check the lease status.
                $leaseStatus = $blob.ICloudBlob.Properties.LeaseStatus
                if ($leaseStatus -eq 'Locked')
                {
                  # Release the lock
                  $stateFile.ICloudBlob.BreakLease()
                }
                # Delete the blob. Currently, this is the only way we know of to effectively reset the terraform configuration.
                # We've already tried, the reset, reconfigure, and force-unlock options, all without deleting the state file, but they don't work as expected.
                Remove-AzStorageBlob -Blob ${{ env.backendStorageBlob }} -Container ${{ env.backendStorageContainer }} -Context $ctx -Verbose
                # Reset the terraform configuration
                terraform init -reconfigure
                # Switch back to the management subscription
                Select-AzSubscription -SubscriptionId ${{ secrets.MGTSUBSCRIPTION }} -Verbose 
              }
            }
          azPSVersion: 'latest'

        # ETL for DCR, Log Analytics and VM mapping and association
      - name: 'associate_vms_with_dcr'
        if: ${{ env.skipAssociateVms == 'false' }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            chmod +x az-scripts/Set-DcrVmAssociation.ps1
            Select-AzSubscription -SubscriptionId ${{ secrets.IDYSUBSCRIPTION }}
            az-scripts/Set-DcrVmAssociation.ps1
          azPSVersion: 'latest'

      # Trigger policy state scan
      - name: 'trigger_policy_state_scan'
        if: ${{ env.operation == 'apply' }}
        run: |
          az account set --subscription ${{ secrets.IDYSUBSCRIPTION }}
          az policy state trigger-scan -g ${{ env.rgpName }} --no-wait --verbose

      # Get VM extension information to determine if the AMA agent is installed, in which case the MMA extension can be removed if desired
      - name: 'get_vm_extension_status'
        if: ${{ env.skipVmExtension == 'false' }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            chmod +x az-scripts/Get-VmExtension.ps1
            Select-AzSubscription -SubscriptionId ${{ secrets.IDYSUBSCRIPTION }}
            az-scripts/Get-VmExtension.ps1
          azPSVersion: 'latest'
      # End of the provision-deprovision job & workflow
