# Use OpenID Connect to authenticate to Azure
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Cwindows#use-the-azure-login-action-with-openid-connect
# *** https://colinsalmcorner.com/using-oidc-with-terraform-in-github-actions/
# change simulation
name: Provision Azure Monitoring Agent
on:
  push:
    branches:
    - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  pre-requisites:
    name: 'Setup'
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      uamiName: ama-uami-01
      uamiResourceGroup: ama-rg-01
      rgpName: rgp-idy
      rgpLocation: centralus
      uamiLocation: eastus2
      uamiRoleAssignmentVmContrib: "Virtual Machine Contributor"
      uamiRoleAssignmentLogAnalyticsContrib: "Log Analytics Contributor"
      uamiRoleAssignmentArcContrib: "Azure Arc Connected Resource Administrator"
      azCliVer: 2.50.0
      tfVersion: 1.5.4
      workingdir: tf
      planOnly: false # Set to true to plan only, false to deploy
      rollback: false # Set to true to rollback, false to deploy
      skipUAMI: true # Set to true to skip UAMI creation, false to create UAMI if necessary

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.workingdir }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Authenticate to Azure tenant using the Azure login action (OIDC)
    - name: Authenticate to Azure with OIDC
      uses: Azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create and assign UAMI
      if: ${{ env.skipUAMI == 'false' }}
      uses: Azure/CLI@v1
      with: 
        azcliversion: ${{ env.azCliVer }}
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/az-scripts/createAndAssignUAMI.sh
          $GITHUB_WORKSPACE/az-scripts/createAndAssignUAMI.sh
    
    # Setup Terraform
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.tfVersion }}
        terraform_wrapper: true
        

    # Check version
    - name: 'Terraform Version'
      run: terraform version

    # Format
    - name: 'Terraform Format'
      run: terraform fmt -recursive

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
 
    # Plan
    - name: 'Terraform Plan'
      id: plan
      run: terraform plan -lock=false -out=tfplan -var "pw=${{ secrets.VM_PASSWORD }}"
      timeout-minutes: 20
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    # Deploy
    - name: 'Terraform Deploy'
      if: ${{ env.planOnly == 'false' && env.rollback == 'false' }}
      id: apply
      run: terraform apply -auto-approve -var "pw=${{ secrets.VM_PASSWORD }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
    
    # Enable AMA upgrade
    - name: Enable AMA upgrade
      if: ${{ env.planOnly == 'false' }}
      uses: Azure/CLI@v1
      with: 
        azcliversion: ${{ env.azCliVer }}
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/az-scripts/enableAMAUpgrade.sh
          $GITHUB_WORKSPACE/az-scripts/enableAMAUpgrade.sh

    # Rollback
    - name: 'Terraform Rollback'
      if: ${{ env.rollback == 'true' && env.planOnly == 'false' }}
      id: destroy
      run: terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
