name: 'prepare_for_tfm_deploy'

on:
  workflow_call:
    inputs:
      operation:
        description: 'The operation to perform'
        required: true
        type: string
      azCliVer:
        description: 'The version of the Azure CLI to use'
        required: true
        type: string
      tfVersion:
        description: 'The version of Terraform to use'
        required: true
        type: string
      tfWorkingdir:
        description: 'The working directory for Terraform'
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        description: 'The Azure client ID'
        required: true
      AZURE_TENANT_ID:
        description: 'The Azure tenant ID'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'The Azure subscription ID'
        required: true

jobs:
  prepare-tfm:
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup Terraform (requires unzip on Ubuntu. Run 'sudo apt-get install unzip' on self-hosted runner)
    - name: 'terraform_setup'
      if: ${{ inputs.operation == 'plan' || inputs.operation == 'apply' || inputs.operation == 'rollback' }}
      id: setup  
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tfVersion }}
        terraform_wrapper: true   
      
    # Check version
    - name: 'terraform_version_check'
      if: ${{ inputs.operation == 'plan' || inputs.operation == 'apply' || inputs.operation == 'rollback' }}
      id: version
      run: terraform version
      
    # Format
    - name: 'terraform_format'
      if: ${{ inputs.operation == 'plan' || inputs.operation == 'apply' || inputs.operation == 'rollback' }}
      id: format
      run: terraform fmt -recursive
    
    # Init
    - name: 'terraform_init'
      if: ${{ inputs.operation == 'plan' || inputs.operation == 'apply' }}
      id: init
      run: terraform init
      timeout-minutes: 2
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      
    # Plan   
    - name: 'terraform_plan'
      working-directory: src/tfm
      if: ${{ inputs.operation == 'plan' || inputs.operation == 'apply' || inputs.operation == 'rollback' }}
      id: plan
      run: terraform plan -compact-warnings -detailed-exitcode -lock=false -out=tfplan
      timeout-minutes: 20
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      